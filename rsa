import sys
import random


def is_prime(n, k=5):
    """
    Miller-Rabin primality test.
    Returns True if n is probably prime, False if n is composite.
    Higher value of k increases the accuracy of the test.
    """
    if n == 2 or n == 3:
        return True
    if n <= 1 or n % 2 == 0:
        return False

    r, s = 0, n - 1
    while s % 2 == 0:
        r += 1
        s //= 2

    for _ in range(k):
        a = random.randint(2, n - 2)
        x = pow(a, s, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False

    return True


def factorize(n):
    """
    Factorizes n into two prime factors.
    Returns a tuple (p, q) if successful, None otherwise.
    """
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0 and is_prime(i) and is_prime(n // i):
            return i, n // i
    return None


def main():
    if len(sys.argv) != 2:
        print("Usage: factors <file>")
        return

    file_path = sys.argv[1]

    try:
        with open(file_path, 'r') as file:
            n = int(file.readline().strip())
            factors = factorize(n)
            if factors:
                p, q = factors
                print(f"{n}={p}*{q}")
    except FileNotFoundError:
        print(f"File '{file_path}' not found.")


if __name__ == '__main__':
    main()
